import * as claimItems from './resources/claim-items';
import * as members from './resources/members';
import * as providers from './resources/providers';
import * as payments from './resources/payments';
import * as transactions from './resources/transactions';
declare const _default: {
    BASE_URLS: {
        [x: string]: string;
    };
    ENVS: {
        LOCAL: string;
        DEV: string;
        STG: string;
        PROD_BLUE: string;
        PROD: string;
    };
    FUNDERS: {
        HICAPS: string;
        MEDICARE: string;
        DVA: string;
        GHS: string;
        PATIENT_FUNDED: string;
        ICARE: string;
    };
    MEDICARE: {
        REFERRER_TYPE: {
            GP: string;
            SPECIALIST: string;
        };
        REFERRAL_PERIODS: {
            STANDARD: string;
            NON_STANDARD: string;
            INDEFINITE: string;
        };
    };
    HEALTH_FUNDS: {
        ACA: string;
        AHM: string;
        AUSTRALIAN_UNITY: string;
        BUPA: string;
        CBHS: string;
        CDH: string;
        CUA: string;
        DEFENCE_HEALTH: string;
        DOCTORS_HEALTH_FUND: string;
        GMF_HEALTH: string;
        GMHBA: string;
        GRAND_UNITED_CORPORATE_HEALTH: string;
        HBF: string;
        HCF: string;
        HEALTH_CASE_INSURANCE: string;
        HIF: string;
        HEALTH_PARTNERS: string;
        HEALTH_COM_AU: string;
        LATROBE_HEALTH_SERVICES: string;
        MEDIBANK: string;
        MILDURA_HEALTH_FUND: string;
        ONEMEDIFUND: string;
        NAVY_HEALTH: string;
        NIB: string;
        PEOPLECARE: string;
        PHOENIX_HEALTH: string;
        POLICE_HEALTH: string;
        QUEENSLAND_COUNTRY_HEALTH_FUND: string;
        RAILWAY_TRANSPORT_HEALTH_FUND: string;
        RESERVE_BANK_HEALTH_SOCIETY: string;
        ST_LUKES_HEALTH: string;
        TEACHERS_HEALTH_FUND: string;
        TRANSPORT_HEALTH: string;
        TUH: string;
        WESTFUND_LIMITED: string;
    };
    PATHS: {
        [x: string]: string;
    };
    TYPES: {
        AUTHORIZE_PAYMENT: string;
        CREATE_TRANSACTION: string;
        VIEW_TRANSACTION: string;
        VIEW_FUTURE: string;
    };
    coreSDK: {
        account: any;
        accountId: any;
        apiVersions: {
            core: string;
            risk: string;
        };
        appId: string;
        appVersion: any;
        apiVer: string;
        axios: import("axios").AxiosInstance;
        baseUrls: undefined;
        defaultVersion: string;
        device: any;
        env: string;
        hasInit: boolean;
        intercomHash: any;
        isSuperAdmin: any;
        isReadOnlyAdmin: any;
        isAnalyticsInitialised: boolean;
        member: any;
        region: undefined;
        requestInterceptor: undefined;
        requestInterceptorSuccess: undefined;
        sdkVersion: any;
        tokens: any;
        abr: typeof import("@medipass/web-sdk/lib/resources/abr");
        accounts: typeof import("@medipass/web-sdk/lib/resources/accounts");
        actions: typeof import("@medipass/web-sdk/lib/resources/actions");
        apiKeys: typeof import("@medipass/web-sdk/lib/resources/api-keys");
        attachments: typeof import("@medipass/web-sdk/lib/resources/attachments");
        auth: typeof import("@medipass/web-sdk/lib/resources/auth");
        applications: typeof import("@medipass/web-sdk/lib/resources/applications");
        blacklist: typeof import("@medipass/web-sdk/lib/resources/blacklist");
        bulkUploads: typeof import("@medipass/web-sdk/lib/resources/bulk-uploads");
        bulkSubmits: typeof import("@medipass/web-sdk/lib/resources/bulk-submits");
        businessProfiles: typeof import("@medipass/web-sdk/lib/resources/business-profiles");
        businesses: typeof import("@medipass/web-sdk/lib/resources/businesses");
        claimItems: typeof import("@medipass/web-sdk/lib/resources/claim-items");
        devices: typeof import("@medipass/web-sdk/lib/resources/devices");
        docAccounts: typeof import("@medipass/web-sdk/lib/resources/doc-accounts");
        documents: typeof import("@medipass/web-sdk/lib/resources/documents");
        emails: typeof import("@medipass/web-sdk/lib/resources/emails");
        filterOptions: typeof import("@medipass/web-sdk/lib/resources/filter-options");
        formApplicationTemplates: typeof import("@medipass/web-sdk/lib/resources/form-application-templates");
        formApplications: typeof import("@medipass/web-sdk/lib/resources/form-applications");
        forms: typeof import("@medipass/web-sdk/lib/resources/forms");
        funders: typeof import("@medipass/web-sdk/lib/resources/funders");
        funderServices: typeof import("@medipass/web-sdk/lib/resources/funder-services");
        funderSettings: typeof import("@medipass/web-sdk/lib/resources/funder-settings");
        funderValues: typeof import("@medipass/web-sdk/lib/resources/funder-values");
        futures: typeof import("@medipass/web-sdk/lib/resources/futures");
        healthFundAccounts: typeof import("@medipass/web-sdk/lib/resources/health-fund-accounts");
        healthFundSettings: typeof import("@medipass/web-sdk/lib/resources/health-fund-settings");
        healthfunds: typeof import("@medipass/web-sdk/lib/resources/healthfunds");
        icdItems: typeof import("@medipass/web-sdk/lib/resources/icditems");
        invoiceScans: typeof import("@medipass/web-sdk/lib/resources/invoice-scans");
        jhcs: typeof import("@medipass/web-sdk/lib/resources/jhcs");
        kyc: typeof import("@medipass/web-sdk/lib/resources/kyc");
        logs: typeof import("@medipass/web-sdk/lib/resources/logs");
        members: typeof import("@medipass/web-sdk/lib/resources/members");
        messageMappings: typeof import("@medipass/web-sdk/lib/resources/message-mappings");
        minions: typeof import("@medipass/web-sdk/lib/resources/minions");
        modalities: typeof import("@medipass/web-sdk/lib/resources/modalities");
        notes: typeof import("@medipass/web-sdk/lib/resources/notes");
        onboardingApplications: typeof import("@medipass/web-sdk/lib/resources/onboarding-applications");
        onboardingRequests: typeof import("@medipass/web-sdk/lib/resources/onboarding-requests");
        ops: typeof import("@medipass/web-sdk/lib/resources/ops");
        organisations: typeof import("@medipass/web-sdk/lib/resources/organisations");
        partners: typeof import("@medipass/web-sdk/lib/resources/partners");
        patients: typeof import("@medipass/web-sdk/lib/resources/patients");
        payments: typeof import("@medipass/web-sdk/lib/resources/payments");
        pms: typeof import("@medipass/web-sdk/lib/resources/pms");
        practiceProfiles: typeof import("@medipass/web-sdk/lib/resources/practice-profiles");
        practices: typeof import("@medipass/web-sdk/lib/resources/practices");
        practiceTypes: typeof import("@medipass/web-sdk/lib/resources/practice-types");
        products: typeof import("@medipass/web-sdk/lib/resources/products");
        professionalCategories: typeof import("@medipass/web-sdk/lib/resources/professional-categories");
        providerRequests: typeof import("@medipass/web-sdk/lib/resources/provider-requests");
        providerRegistrationTypes: typeof import("@medipass/web-sdk/lib/resources/provider-registration-types");
        providerNumberTypes: typeof import("@medipass/web-sdk/lib/resources/provider-number-types");
        providerTypes: typeof import("@medipass/web-sdk/lib/resources/provider-types");
        refSources: typeof import("@medipass/web-sdk/lib/resources/ref-sources");
        risk: typeof import("@medipass/web-sdk/lib/resources/risk");
        rnas: typeof import("@medipass/web-sdk/lib/resources/rnas");
        roles: typeof import("@medipass/web-sdk/lib/resources/roles");
        selfCheckoutSessions: typeof import("@medipass/web-sdk/lib/resources/self-checkout-sessions");
        settlements: typeof import("@medipass/web-sdk/lib/resources/settlements");
        services: typeof import("@medipass/web-sdk/lib/resources/services");
        signUp: typeof import("@medipass/web-sdk/lib/resources/sign-up");
        specialties: typeof import("@medipass/web-sdk/lib/resources/specialties");
        staffProfiles: typeof import("@medipass/web-sdk/lib/resources/staff-profiles");
        staff: typeof import("@medipass/web-sdk/lib/resources/staff");
        statistics: typeof import("@medipass/web-sdk/lib/resources/statistics");
        subscriptions: typeof import("@medipass/web-sdk/lib/resources/subscriptions");
        terminals: typeof import("@medipass/web-sdk/lib/resources/terminals");
        transactionExport: typeof import("@medipass/web-sdk/lib/resources/transaction-export");
        transactions: typeof import("@medipass/web-sdk/lib/resources/transactions");
        triggers: typeof import("@medipass/web-sdk/lib/resources/triggers");
        vendors: typeof import("@medipass/web-sdk/lib/resources/vendors");
        verify: typeof import("@medipass/web-sdk/lib/resources/verify");
        workflowExceptions: typeof import("@medipass/web-sdk/lib/resources/workflow-exceptions");
        workers: typeof import("@medipass/web-sdk/lib/resources/workers");
        aws: typeof import("@medipass/web-sdk/lib/services/aws");
        versions: typeof import("@medipass/web-sdk/lib/services/version");
        regions: typeof import("@medipass/web-sdk/lib/utils/regions");
        professionsUtils: typeof import("@medipass/web-sdk/lib/utils/professions");
        staffUtils: typeof import("@medipass/web-sdk/lib/utils/staff");
        applicationUtils: typeof import("@medipass/web-sdk/lib/utils/application");
        storage: {
            clearAll: (opts?: import("@medipass/web-sdk/lib/services/storage").CommonOpts | undefined) => void;
            remove: (key: string, opts?: import("@medipass/web-sdk/lib/services/storage").CommonOpts | undefined) => void;
            get: (key: string, opts?: import("@medipass/web-sdk/lib/services/storage").CommonOpts | undefined) => any;
            set: (key: string, val: any, opts?: import("@medipass/web-sdk/lib/services/storage").SetOpts | undefined) => void;
            onboardingStatus: {
                get: () => any;
                set: (value: any, opts?: import("@medipass/web-sdk/lib/services/storage").SetOpts | undefined) => void;
                remove: () => void;
            };
            previousCreatePHITransactionFormValues: {
                get: () => any;
                set: (value: any, opts?: import("@medipass/web-sdk/lib/services/storage").SetOpts | undefined) => void;
                remove: () => void;
            };
        };
        setup(env?: string | undefined, opts?: import("@medipass/web-sdk").SetupOpts | undefined): void;
        setConfig(opts: import("@medipass/web-sdk").SetupOpts): void;
        setSDKAppVersion(version: string): void;
        hasValidSession(tokenType?: string | undefined): any;
        hasSessionExpired(tokenType?: string | undefined): any;
        setRequestInterceptor(headers: Record<string, any>): void;
        setResponseInterceptor(): void;
        clearTokens(): void;
        isImpersonating(): boolean;
        getTokenExpiry(tokenType?: string | undefined): any;
        setToken(token: string, tokenType?: string | undefined): void;
        setAccount(account: Record<string, any>): void;
        setMember(member: Record<string, any>): void;
        setRegion(region: string): void;
        stop(): void;
        removeStorage(): void;
        setIsAnalyticsInitialised(isInitialised: boolean): void;
    };
    business: undefined;
    config: {
        apiKey: undefined;
        appId: undefined;
        appVersion: undefined;
        baseUrl: undefined;
        env: string;
        token: undefined;
    };
    frames: {
        [x: string]: null;
    };
    claimItems: typeof claimItems;
    members: typeof members;
    providers: typeof providers;
    transactions: typeof transactions;
    payments: typeof payments;
    setConfig(config: Record<string, any>): Promise<void>;
    setupFrame(opts?: {}): null;
    renderCreateTransaction(payload: Record<string, any>, options: any): void;
    renderViewTransaction(query: Record<string, any>, options: any): void;
    renderViewFuture(query: Record<string, any>, options: any): void;
    renderAuthorizePayment(payload: Record<string, any>, options: any): any;
    buildTransactionUrl(payload?: Record<string, any>, config?: Record<string, any>): string;
};
export default _default;
